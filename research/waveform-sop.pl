#!/usr/bin/perl

# waveform-sop.pl - Minimal sum of products for combined waveforms
#
# Dag Lem <resid@nimrod.no>
#
# Read a sample file generated on by combsample.prg on a C64, and generate
# boolean sums of products (SOP) for each of the 8 bits making up the samples.
# espresso is used to generate the minimized sums of products.

use strict;
use warnings;
use File::Slurper qw(read_binary);
use IPC::Open2;

sub print_bit_expr($);

@ARGV == 1 or die "Usage: $0 6581wfx0.dat\n";

my $filename = shift;
$filename =~ /(?:6581|8580)wf([7653])0\.dat/i or die "Use file generated by combsample.prg\n";

# Map from filename to sample function name bits.
my $wf = {
    '7' => 'PST',
    '6' => 'PS_',
    '5' => 'P_T',
    '3' => '_ST'
}->{$1};

# Read binary sample file, skip C64 address bytes.
my @samples = unpack("C*", substr(read_binary($filename), 2));

my $pid = open2(my $chld_out, my $chld_in, 'espresso', '-Dexact');

my $names = join(' ', map { "b$_" } reverse 4..11);

print $chld_in <<EOF;
.i 12
.o 8
.ob $names
.type f
EOF

for (my $i = 0; $i < (1 << 12); $i++) {
    my $input = substr(unpack('B16', pack('n', $i)), 4);
    my $output = unpack('B8', pack('C', $samples[$i]));
    next unless $output =~ /1/;
    print $chld_in <<EOF;
$input $output
EOF
}

print $chld_in <<EOF;
.e
EOF

print_bit_expr($chld_out);

waitpid($pid, 0);
my $child_exit_status = $? >> 8;
$child_exit_status && die("Failed to run espresso: $child_exit_status\n");


sub print_bit_expr($)
{
    my $fh = shift;

    my @func;
    while (<$fh>) {
        chomp;
        next if /^\./;
        my ($input, $output) = split(/ /);
        # Zeros in the ON-set inputs doesn't make sense for these samples,
        # since neighboring set bits cause the bit voltage to rise.
        # It has not been determined what causes this anomaly in the samples,
        # meanwhile we replace 0 with 1 to make sense of e.g. the excerpt below:
        # 111-11111111 00001000
        # 111111-----1 00001000
        # 111111----0- 00001000
        # 111111---0-- 00001000
        # 111111--1--- 00001000
        # 111111-1---- 00001000
        $input =~ s/0/1/g;
        $input =~ s/-/0/g;
        $input = sprintf("'h%03x", unpack('n', pack('B12', $input)) >> 4);
        for my $i (0..7) {
            push @{$func[$i]}, substr($output, $i, 1) eq "1" ? $input : ();
        }
    }

    my @expr;
    for my $input (@func) {
        push @expr, "        " . join(' | ', map { "((x & $_) == $_)" } reverse sort @$input);
    }

    print "    sid_waveform_$wf = {\n", join(",\n", @expr), "\n    };\n";
}
